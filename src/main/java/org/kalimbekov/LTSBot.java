package org.kalimbekov;

import com.ptsmods.mysqlw.Pair;
import org.kalimbekov.entities.*;
import org.kalimbekov.services.DBService;
import org.kalimbekov.services.TranslationService;
import org.telegram.telegrambots.bots.DefaultBotOptions;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;

public class LTSBot extends TelegramLongPollingBot {
    private final String COMMAND_START_MESSAGE = """
                            –†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–æ–≤–∞—Ç—å —Ç–µ–±—è, –¥—Ä—É–≥! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä —Å–µ—Ä–≤–∏—Å–∞ Lihachachang! üëã
                            –Ø –æ—á–µ–Ω—å –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ –≤—Ä–µ–º—è, –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω–æ–µ —Å–æ –º–Ω–æ–π, –ø—Ä–∏–Ω–µ—Å—ë—Ç —Ç–µ–±–µ –Ω–µ–º–∞–ª–æ –ø–æ–ª—å–∑—ã!
                            –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤!
                            """;
    private final String COMMAND_UNRECOGNISED_MESSAGE = """
                            –ú–Ω–µ –∂–∞–ª—å, –Ω–æ —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –∫–∞–∫ –º–Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É... üò∂
                            –ü–æ—Å–º–æ—Ç—Ä–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é!
                            """;
    private final String COMMAND_TRANSLATE_MESSAGE =
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ) —è–∑—ã–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç, –∞ " +
                    "–Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–µ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–∞–º —Ç–µ–∫—Å—Ç. –Ø–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ —è –æ–ø—Ä–µ–¥–µ–ª—é —Å–∞–º!";
    private final String COMMAND_ADD_WORD =
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ) —è–∑—ã–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–≤–∞ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º," +
                    " –∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤–≤–µ–¥–∏—Ç–µ —Å–∞–º–æ —Å–ª–æ–≤–æ. –ù–µ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞, —è —Å–¥–µ–ª–∞—é —ç—Ç–æ –∑–∞ –≤–∞—Å!";

    private final DBService db;
    private final TranslationService translationService;

    @Override
    public String getBotUsername() {
        return "lihachachang_bot";
    }

    public LTSBot(String botToken, DBService db, TranslationService translationService) {
        super(new DefaultBotOptions(), botToken);
        this.db = db;
        this.translationService = translationService;
    }

    @Override
    public void onUpdateReceived(Update update) {
        System.out.println(update);
        System.out.println(update.getCallbackQuery());

        Message message = update.getMessage();

        long chatId;
        if (message != null)
            chatId = message.getFrom().getId();
        else
            chatId = update.getCallbackQuery().getFrom().getId();

        User user = db.getUserByChatId(chatId);
        State state;
        if (user == null) {
            Pair<User, State> pair = db.createUser(chatId);

            user = pair.getLeft();
            state = pair.getRight();
        } else {
            state = db.getStateByUserId(user.getId());
        }

        if (message != null && message.isCommand())
        {
            String messageText = message.getText();
            switch (messageText) {
                case "/start" -> sendText(chatId, COMMAND_START_MESSAGE);
                case "/translate" -> {
                    sendText(user.getChatId(), COMMAND_TRANSLATE_MESSAGE);

                    state.setDescription(State.AWAITS_ORIGINAL_TEXT);
                    db.updateState(state);
                }
                case "/train_translate" -> {
                    Text text = db.getRandomText();

                    sendText(user.getChatId(),
                            "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫:\n" + text.getQuestion());

                    state.setDescription(State.AWAITS_TRANSLATION);
                    state.setText(text);
                    db.updateState(state);
                } case "/train_fill_gaps" -> {
                    Task task = db.getRandomTask();

                    state.setDescription(State.AWAITS_GAP_FILL);
                    state.setTask(task);
                    db.updateState(state);

                    sendAnswerOptions(user.getChatId(), task);
                } case "/add_word" -> {
                    state.setDescription(State.AWAITS_WORD);
                    db.updateState(state);

                    sendText(user.getChatId(), COMMAND_ADD_WORD);
                } case "/get_word" -> {
                    Word word = db.getRandomWord(user);
                    if (word == null) {
                        sendText(user.getChatId(),
                                "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞! –ò—Å–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /add_word");
                    } else {
                        state.setWord(word);
                        state.setDescription(State.AWAITS_WORD_TRANSLATION);
                        db.updateState(state);

                        sendText(user.getChatId(),
                                "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ '" + word.getWord() + "'");
                    }
                } case "/reset" -> {
                    sendText(user.getChatId(),
                            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ? –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ:\n" +
                                    "–î–∞, —è —Ö–æ—á—É —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ " +
                                    message.getFrom().getUserName()
                            );

                    state.setDescription(State.AWAITS_RESET_CONFIRMATION);
                    db.updateState(state);
                }
                default -> sendText(chatId, COMMAND_UNRECOGNISED_MESSAGE);
            }
        }
        else if (update.hasCallbackQuery()) // Filling the gaps is the only way when CallbackQuery is being sent
        {
            CallbackQuery callbackQuery = update.getCallbackQuery();
            String answer = callbackQuery.getData();

            Task task = state.getTask();
            String correctAnswer = task.getAnswerOptions()[task.getAnswer()];

            if (answer.equals(correctAnswer)) {
                user.setPoints(user.getPoints() + task.getPoints());
                db.updateUser(user);

                state.setDescription(null);
                db.updateState(state);

                sendText(chatId,
                        "–í–µ—Ä–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!" +
                                "\n–ù–∞—á–∏—Å–ª–µ–Ω–æ –æ—á–∫–æ–≤: " + task.getPoints() +
                                "\n–í—Å–µ–≥–æ –æ—á–∫–æ–≤: " + user.getPoints()
                );
            } else {
                sendText(chatId,
                        "–ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
                );
            }
        }
        else
        {
            assert message != null;
            String messageText = message.getText();

            switch (state.getDescription()) {
                case State.AWAITS_ORIGINAL_TEXT -> {
                    String[] languageAndText = messageText.split("\\R", 2);
                    if (languageAndText.length < 2) {
                        sendText(user.getChatId(),
                                "–ù–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –∏ —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö.");
                    } else {
                        sendText(user.getChatId(), "–§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç ‚è≥");

                        String translation = translationService.getTranslation(
                                languageAndText[0],
                                languageAndText[1]
                        );

                        state.setDescription(null);
                        db.updateState(state);

                        sendText(user.getChatId(), translation);
                    }
                } case State.AWAITS_TRANSLATION -> {
                    Text text = state.getText();

                    String result = translationService.checkTranslation(text.getQuestion(), messageText);
                    if (result.equals("–í–µ—Ä–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")) {
                        user.setPoints(user.getPoints() + text.getPoints());
                        result += "\n–ù–∞—á–∏—Å–ª–µ–Ω–æ –æ—á–∫–æ–≤: " + text.getPoints() +
                                "\n–í—Å–µ–≥–æ –æ—á–∫–æ–≤: " + user.getPoints();
                    }

                    state.setDescription(null);
                    db.updateState(state);
                    db.updateUser(user);

                    sendText(user.getChatId(), result);
                } case State.AWAITS_GAP_FILL -> {
                    Task task = state.getTask();

                    String answer = task.getAnswerOptions()[task.getAnswer()];
                    if (messageText.equals(answer)) {
                        user.setPoints(user.getPoints() + task.getPoints());
                        sendText(chatId,
                                "–í–µ—Ä–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!" +
                                        "\n–ù–∞—á–∏—Å–ª–µ–Ω–æ –æ—á–∫–æ–≤: " + task.getPoints() +
                                        "\n–í—Å–µ–≥–æ –æ—á–∫–æ–≤: " + user.getPoints()
                                );
                        state.setDescription(null);
                        db.updateState(state);
                        db.updateUser(user);
                    } else {
                        sendText(chatId,
                                "–ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
                        );
                    }
                } case State.AWAITS_WORD -> {
                    String[] languageAndWord = messageText.split("\\R", 2);
                    if (languageAndWord.length < 2) {
                        sendText(user.getChatId(),
                                "–ù–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –∏ —Å–∞–º–æ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö.");
                    } else {
                        String answer = translationService.getWordTranslation(
                                languageAndWord[0],
                                languageAndWord[1]
                        );

                        db.createWord(user, languageAndWord[1], answer);

                        state.setDescription(null);
                        db.updateState(state);

                        sendText(user.getChatId(),
                                "–°–ª–æ–≤–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫!\n" +
                                        "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ " + answer + " –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞" +
                                        "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /get_word –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞");
                    }
                } case State.AWAITS_WORD_TRANSLATION -> {
                    Word word = state.getWord();

                    if (messageText.equalsIgnoreCase(word.getAnswer())) {
                        sendText(user.getChatId(),
                                "–í–µ—Ä–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!");

                        state.setDescription(null);
                        db.updateState(state);
                    }
                    else
                        sendText(user.getChatId(),
                                "–ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
                } case State.AWAITS_RESET_CONFIRMATION -> {
                    if (messageText.equals("–î–∞, —è —Ö–æ—á—É —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ " +
                            message.getFrom().getUserName())) {
                        db.deleteUser(user);
                        sendText(chatId,
                                "–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã —Å –º–æ–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞... \uD83D\uDE22");
                    }
                }
            }
        }
    }

    public void sendText(long chatId, String message) {
        SendMessage sm = SendMessage.builder()
                .chatId(chatId)
                .text(message)
                .build();

        try {
            execute(sm);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    public void sendAnswerOptions(long chatId, Task task) {
        String[] answerOptions = task.getAnswerOptions();

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();

        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();
        ArrayList<InlineKeyboardButton> row = new ArrayList<>();
        for (int i = 0; i != answerOptions.length; i++) { // This will make list a bit prettier
            if (i % 2 == 0) {
                InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton();
                inlineKeyboardButton.setText(answerOptions[i]);
                inlineKeyboardButton.setCallbackData(answerOptions[i]);

                row.add(inlineKeyboardButton);
            } else {
                InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton();
                inlineKeyboardButton.setText(answerOptions[i]);
                inlineKeyboardButton.setCallbackData(answerOptions[i]);

                row.add(inlineKeyboardButton);
                buttons.add(new ArrayList<>(row));

                row.clear();
            }
        }
        if (answerOptions.length % 2 == 1)
            buttons.add(row);
        inlineKeyboardMarkup.setKeyboard(buttons);

        SendMessage sm = SendMessage.builder()
                .chatId(chatId)
                .text(task.getQuestion())
                .replyMarkup(inlineKeyboardMarkup)
                .build();
        try {
            execute(sm);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }
}
